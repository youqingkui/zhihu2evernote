// Generated by CoffeeScript 1.8.0
(function() {
  var Save2Evernote, async, cheerio, makeNote, q, request;

  async = require('async');

  makeNote = require('./createNote');

  request = require('request');

  cheerio = require('cheerio');

  q = async.queue(function(url, noteStore, cookie, cb) {
    var task;
    console.log("noteStore", noteStore);
    console.log('worker is processing task: ', url, cookie);
    task = new Save2Evernote(url, noteStore, cookie);
    return async.series([
      function(callback) {
        return task.getUrlPage(function(err) {
          if (err) {
            return callback(err);
          }
          return callback();
        });
      }, function(callback) {
        return task.checkFav(function() {
          return callback();
        });
      }, function(callback) {
        return task.changeContent(function(err) {
          if (err) {
            return callback(err);
          }
          return callback();
        });
      }, function(callback) {
        return task.createNote(function(err) {
          if (err) {
            return cb(err);
          }
          return callback();
        });
      }
    ], function(err) {
      if (err) {
        return cb(err);
      }
      console.log("worker is end task: ", url, noteStore, cookie);
      return cb();
    });
  }, 2);

  q.saturated = function() {
    return console.log('all workers to be used');
  };

  q.empty = function() {
    return console.log('no more tasks wating');
  };

  q.drain = function() {
    return console.log('all tasks have been processed');
  };

  Save2Evernote = (function() {
    function Save2Evernote(url, noteStore, cookie) {
      this.url = url;
      this.noteStore = noteStore;
      this.cookie = cookie;
      this.$ = null;
      this.title = '';
      this.tagArr = [];
      this.content = '';
      this.enContent = '';
      this.resourceArr = [];
    }

    Save2Evernote.prototype.getUrlPage = function(cb) {
      var op, self;
      self = this;
      op = self.reqOp(self.url);
      return request.get(op, function(err, res, body) {
        var $;
        if (err) {
          return cb(err);
        }
        $ = cheerio.load(body);
        self.$ = $;
        return cb();
      });
    };

    Save2Evernote.prototype.checkFav = function(cb) {
      var $, self, tagList;
      self = this;
      $ = self.$;
      tagList = $("a.zm-item-tag");
      tagList.each(function(i, elem) {
        var tagName;
        tagName = $(elem).text().trim();
        return self.tagArr.push(tagName);
      });
      self.title = $("#zh-question-title .zm-item-title a").text();
      self.content = $(".zm-item-answer .zm-editable-content").html();
      self.timeInfo = $("#zh-question-answer-wrap span.answer-date-link-wrap").text();
      self.content += self.timeInfo;
      return cb();
    };

    Save2Evernote.prototype.changeContent = function(cb) {
      var $, imgs, self;
      self = this;
      $ = cheerio.load(self.content);
      $("a, span, img, i, div, code").map(function(i, elem) {
        var k, _results;
        _results = [];
        for (k in elem.attribs) {
          if (k !== 'src') {
            _results.push($(this).removeAttr(k));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      imgs = $("img");
      return async.each(imgs, function(item, callback) {
        var src;
        src = $(item).attr('src');
        return readImgRes(src, function(err, resource) {
          var hexHash, md5, newTag;
          if (err) {
            return cb(err);
          }
          self.resourceArr.push(resource);
          md5 = crypto.createHash('md5');
          md5.update(resource.image);
          hexHash = md5.digest('hex');
          newTag = "<en-media type=" + resource.mime + " hash=" + hexHash + " />";
          console.log(newTag);
          $(item).replaceWith(newTag);
          return callback();
        });
      }, function() {
        self.enContent = $.html({
          xmlMode: true
        });
        return cb();
      });
    };

    Save2Evernote.prototype.createNote = function(cb) {
      return makeNote(this.noteStore, this.title, this.tagArr, this.enContent, this.url, this.resourceArr, function(err, note) {
        if (err) {
          return cb(err);
        }
        console.log("+++++++++++++++++++++++");
        console.log("" + note.title + " create ok");
        console.log("+++++++++++++++++++++++");
        return cb();
      });
    };

    Save2Evernote.prototype.readImgRes = function(imgUrl, cb) {
      var op, self;
      self = this;
      op = self.reqOp(imgUrl);
      op.encoding = 'binary';
      return async.auto({
        readImg: function(callback) {
          return request.get(op, function(err, res, body) {
            var mimeType;
            if (err) {
              return cb(err);
            }
            mimeType = res.headers['content-type'];
            return callback(null, body, mimeType);
          });
        },
        enImg: [
          'readImg', function(callback, result) {
            var data, hash, image, mimeType, resource;
            mimeType = result.readImg[1];
            image = new Buffer(result.readImg[0], 'binary');
            hash = image.toString('base64');
            data = new Evernote.Data();
            data.size = image.length;
            data.bodyHash = hash;
            data.body = image;
            resource = new Evernote.Resource();
            resource.mime = mimeType;
            resource.data = data;
            resource.image = image;
            return cb(null, resource);
          }
        ]
      });
    };

    Save2Evernote.prototype.reqOp = function(getUrl) {
      var options, self;
      self = this;
      options = {
        url: getUrl,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.90 Safari/537.36',
          'Cookie': self.cookie
        }
      };
      return options;
    };

    return Save2Evernote;

  })();

  module.exports = q;

}).call(this);

//# sourceMappingURL=queue.js.map
